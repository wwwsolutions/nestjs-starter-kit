generator client {
  provider = "prisma-client-js"
  output   = "../../../../../../../node_modules/.prisma/client"
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../../../../../../../libs/api/data-access/models/src/lib/generated"
  reExport               = "All"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
  noTypeId               = false
}

datasource postgresql {
  provider = "postgresql"
  url      = env("PRISMA_DATASOURCE_URL")
  // url      = "postgresql://root:root@127.0.0.1:5432/demo"
}



model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  /// @Validator.IsNotEmpty()
  /// @Validator.IsEmail()
  email     String   @unique
  
  /// @HideField()
  /// @Validator.IsNotEmpty()
  /// @Validator.MinLength(3)
  /// @Validator.MaxLength(16)
  password  String
  
  firstName String?
  lastName  String?
  courses   Course[]

  @@map("users")
}

model Course {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  /// @Validator.MinLength(3)
  /// @Validator.MaxLength(24)
  title       String
  
  /// @Validator.MaxLength(255)
  description String?
  imageUrl    String?
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id])
  lessons     Lesson[]

  @@map("courses")
}

model Lesson {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  /// @Validator.MinLength(3)
  /// @Validator.MaxLength(24)
  title       String
  /// @Validator.MaxLength(255)
  description String?
  /// @Validator.MaxLength(255)
  content     String?
  courseId    Int
  course      Course   @relation(fields: [courseId], references: [id])

  @@map("lessons")
}
