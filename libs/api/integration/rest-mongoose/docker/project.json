{
  "name": "api-integration-rest-mongoose-docker",
  "$schema": "..\\..\\..\\..\\..\\node_modules\\nx\\schemas\\project-schema.json",
  "sourceRoot": "libs/api/integration/rest-mongoose/docker/src",
  "projectType": "library",
  "targets": {
    "build": {
      "executor": "@nrwl/js:tsc",
      "outputs": ["{options.outputPath}"],
      "options": {
        "outputPath": "dist/libs/api/integration/rest-mongoose/docker",
        "main": "libs/api/integration/rest-mongoose/docker/src/index.ts",
        "tsConfig": "libs/api/integration/rest-mongoose/docker/tsconfig.lib.json",
        "assets": ["libs/api/integration/rest-mongoose/docker/*.md"]
      }
    },
    "lint": {
      "executor": "@nrwl/linter:eslint",
      "outputs": ["{options.outputFile}"],
      "options": {
        "lintFilePatterns": [
          "libs/api/integration/rest-mongoose/docker/**/*.ts"
        ]
      }
    },
    "generate": {
      "executor": "nx:run-commands",
      "options": {
        "parallel": false,
        "cwd": "libs/api/integration/rest-mongoose/docker/src",
        "commands": [
          "docker-compose --project-name rest-mongoose-integration-{args.mode} --verbose --env-file ../../../../../../apps/api/.env.{args.mode} -f ./{args.mode}/base.yaml -f ./{args.mode}/environment.yaml -f ./{args.mode}/volumes.yaml -f ./{args.mode}/ports.yaml -f ./{args.mode}/networks.yaml config > ../../../../../../generated/docker/docker-compose-stack.{args.mode}.yaml"
        ]
      }
    },
    "up": {
      "executor": "nx:run-commands",
      "options": {
        "parallel": false,
        "commands": [
          "docker-compose --project-name rest-mongoose-integration-{args.mode} --verbose -f generated/docker/docker-compose-stack.{args.mode}.yaml up --build -d"
        ]
      }
    },
    "down": {
      "executor": "nx:run-commands",
      "options": {
        "parallel": false,
        "commands": [
          "docker-compose --project-name rest-mongoose-integration-{args.mode} --verbose -f generated/docker/docker-compose-stack.{args.mode}.yaml down --volumes --remove-orphans"
        ]
      }
    },
    "clean": {
      "executor": "nx:run-commands",
      "options": {
        "parallel": false,
        "commands": [
          "npx rimraf -lf generated/docker/docker-compose-stack.{args.mode}.yaml",
          "npx rimraf generated/docker/volumes"
        ]
      }
    },
    "config": {
      "executor": "nx:run-commands",
      "options": {
        "parallel": false,
        "commands": [
          "docker-compose -f generated/docker/docker-compose-stack.{args.mode}.yaml config"
        ]
      }
    },
    "logs": {
      "executor": "nx:run-commands",
      "options": {
        "parallel": false,
        "commands": [
          "docker-compose  -f generated/docker/docker-compose-stack.{args.mode}.yaml logs -f -t --tail 30"
        ]
      }
    },
    "logs-save": {
      "executor": "nx:run-commands",
      "options": {
        "parallel": false,
        "commands": [
          "docker-compose -f generated/docker/docker-compose-stack.{args.mode}.yaml logs -f -t >> .docker/logs/myDockerCompose.log"
        ]
      }
    },
    "system-prune": {
      "executor": "nx:run-commands",
      "options": {
        "parallel": false,
        "commands": ["docker system prune -a --volumes -f"]
      }
    },
    "list-of-commands": {
      "executor": "nx:run-commands",
      "options": {
        "parallel": false,
        "commands": [
          "nx run api-integration-rest-mongoose-docker:generate --mode=development",
          "nx run api-integration-rest-mongoose-docker:up --mode=development",
          "nx run api-integration-rest-mongoose-docker:down --mode=development",
          "nx run api-integration-rest-mongoose-docker:clean --mode=development",
          "nx run api-integration-rest-mongoose-docker:config --mode=development",
          "nx run api-integration-rest-mongoose-docker:logs --mode=development",
          "nx run api-integration-rest-mongoose-docker:logs-save --mode=development",
          "nx run api-integration-rest-mongoose-docker:system-prune"
        ]
      }
    }
  },
  "tags": ["type:config", "scope:api"]
}
